<?php

/**
 * Health Icons Loader
 * Manages file-based Health Icons for the 360 Global Blocks plugin
 */

if (!defined('ABSPATH')) {
    exit;
}

class HealthIconsLoader {
    private static $instance = null;
    private $icons_cache = null;
    private $icons_directory;

    public function __construct() {
        $this->icons_directory = plugin_dir_path(__FILE__) . '../assets/icons/';
    }

    public static function getInstance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    /**
     * Get all available Health Icons organized by category
     */
    public function getAllIcons() {
        if ($this->icons_cache !== null) {
            return $this->icons_cache;
        }

        $icons = array();
        $categories = array('body', 'conditions', 'devices', 'people', 'specialties');

        foreach ($categories as $category) {
            $category_path = $this->icons_directory . $category . '/';
            
            if (is_dir($category_path)) {
                $files = glob($category_path . '*.svg');
                
                foreach ($files as $file) {
                    $filename = basename($file, '.svg');
                    $icon_key = $category . '/' . $filename;
                    
                    $icons[$icon_key] = array(
                        'name' => $this->formatIconName($filename),
                        'category' => $this->formatCategoryName($category),
                        'file' => $file
                    );
                }
            }
        }

        $this->icons_cache = $icons;
        return $icons;
    }

    /**
     * Get a specific icon's SVG content
     */
    public function getIcon($icon_key) {
        $icons = $this->getAllIcons();
        
        if (isset($icons[$icon_key]) && file_exists($icons[$icon_key]['file'])) {
            return file_get_contents($icons[$icon_key]['file']);
        }
        
        return null;
    }

    /**
     * Render an icon with proper attributes
     */
    public function renderIcon($icon_key, $attributes = array()) {
        $svg_content = $this->getIcon($icon_key);
        
        if (!$svg_content) {
            return '';
        }

        // Add default attributes
        $default_attributes = array(
            'class' => 'health-icon',
            'role' => 'img',
            'aria-hidden' => 'true'
        );

        $attributes = array_merge($default_attributes, $attributes);

        // Inject attributes into SVG
        $svg_content = $this->injectSvgAttributes($svg_content, $attributes);

        return $svg_content;
    }

    /**
     * Inject attributes into SVG element
     */
    private function injectSvgAttributes($svg_content, $attributes) {
        $attributes_string = '';
        
        foreach ($attributes as $key => $value) {
            $attributes_string .= ' ' . esc_attr($key) . '="' . esc_attr($value) . '"';
        }

        // Replace the opening SVG tag with attributes
        $svg_content = preg_replace(
            '/<svg([^>]*)>/',
            '<svg$1' . $attributes_string . '>',
            $svg_content,
            1
        );

        return $svg_content;
    }

    /**
     * Format icon name for display
     */
    private function formatIconName($filename) {
        return ucwords(str_replace(array('_', '-'), ' ', $filename));
    }

    /**
     * Format category name for display
     */
    private function formatCategoryName($category) {
        $category_names = array(
            'body' => 'Body Parts & Anatomy',
            'conditions' => 'Health Conditions',
            'devices' => 'Medical Devices',
            'people' => 'Healthcare People',
            'specialties' => 'Medical Specialties'
        );

        return isset($category_names[$category]) ? $category_names[$category] : ucwords($category);
    }
}

/**
 * Convenience functions
 */
function get_health_icon($icon_key, $attributes = array()) {
    $loader = HealthIconsLoader::getInstance();
    return $loader->renderIcon($icon_key, $attributes);
}

function get_all_health_icons() {
    $loader = HealthIconsLoader::getInstance();
    return $loader->getAllIcons();
}

function health_icon_exists($icon_key) {
    $loader = HealthIconsLoader::getInstance();
    $icons = $loader->getAllIcons();
    return isset($icons[$icon_key]);
}